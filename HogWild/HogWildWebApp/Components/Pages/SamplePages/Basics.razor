<!-- Razor component for the page accessible at "/SamplePages/Basics" -->
@page "/SamplePages/Basics"


<!-- PageTitle component to set the page title -->
<PageTitle>Review page basics</PageTitle>

<!-- Main heading of the page -->
<h1>Introduction to Blazor Page (Review)</h1>

@{
    // Blazor components combine C# and HTML code in a single file
    // The '@' symbol is used to switch between the HTML and C# environments
    // When using '@', you're in the C# environment, allowing for C# code execution
    // Without '@', you're in the HTML environment, where you write standard HTML
}

<!-- This is a header indicating a demonstration of using methods. -->
<div>
    <h3>Demonstration of using methods</h3>

    <!-- Conditionally display content based on the 'myName' variable. -->
    @if (string.IsNullOrWhiteSpace(myName))
    {
        <!-- Display a message when 'myName' is empty or null, indicating that the random number is odd. -->
        <p>The random number is odd {@oddEvenValue}</p>
    }
    else
    {
        <!-- Display the value of 'myName' when it's not empty. -->
        <p>@myName</p>
    }
    <!-- This is a button that triggers the 'RandomValue' method when clicked. -->
    <button class="btn-success" @onclick="RandomValue">
        Random Value
    </button>
</div>

<section class="setflex">
    <div class="onethird">
        <!-- Heading for this section -->
        <h3>TextBoxes</h3>
        <!-- p and input for entering an email -->
        <label>
            Enter an Email
            <input type="email" @bind="emailText"
                   placeholder="enter email" />
        </label>
        <br />
        <!-- p and input for entering a password -->
        <label>
            Enter a Password
            <input type="password" @bind="passwordText"
                   placeholder="enter password" />
        </label>
        <br />
        <!-- p and input for entering a date -->
        <label>
            Enter a Date
            <input type="date" @bind="dateText" />
        </label>
        <br />
        <!-- Button to trigger the TextSubmit method -->
        <button class="btn-success" @onclick="TextSubmit">
            Text Submit
        </button>
    </div>

    <div class=onethird>
        <!-- Individual Radio Buttons -->
        <h3>Radiobuttons CheckBox TextArea</h3>
        <br />
        <!-- Radio Buttons using Collections -->
        <label>
            Select your favorite meal using a foreach loop<br />
        </label>
        <br />
        @foreach (var item in @meals)
        {
            @*  Loop through the meals list and create radio buttons for each meal option *@
            <input type="radio" name="meal" value="@item" @onchange="HandleMealSelection" checked="@(item == meal)" /> @item
            <br />  <!-- Line break to separate radio buttons -->
        }
        <br />


        <!-- label for the checkbox indicating agreement to terms -->
        <label>
            <!-- Checkbox input bound to the acceptanceBox variable -->
            <input type="checkbox" @bind="acceptanceBox" />
            <!-- p text indicating the agreement -->
            &nbsp; I agree to terms
        </label>

        <br />
        <br />
        <!-- Textarea input element -->
        <textarea rows="5" cols="50" placeholder="enter message"
                  @bind="messageBody"></textarea><!-- Data binding to the 'messageBody' C# variable -->

        <br />
        <br />
        <!-- Button element for submitting the RadioCheckAreaSubmit method when clicked -->
        <button class="btn-success" @onclick="RadioCheckAreaSubmit">
            Radio/Check/Area Submit
        </button>
    </div>

    <div class=onethird>
        <h3>List and Slider</h3>
        <label>
            <!-- Display a p for the dropdown, instructing the user to select their favorite ride. -->
            Select your favorite Ride

            <!-- Create a dropdown select element that binds to the 'myRide' property. -->
            <select @bind="myRide">

                <!-- Default option with a value of "0" and instructs the user to select a ride. -->
                <option value="0">Select ride ...</option>

                <!-- Loop through each 'ride' in the 'rides' collection and create an option element for each. -->
                @foreach (var ride in @rides)
                {
                    <!-- Set the option value to the 'ValueID' of the 'ride' object. -->
                    <option value="@ride.ValueID">
                        <!-- Display the 'DisplayText' of the 'ride' object as the option text. -->
                        @ride.DisplayText
                    </option>
                }
            </select>
        </label>
        <br />
        <br />
        <label>
            <!-- Display a p for the dropdown, instructing the user to select their favorite vacation spot. -->
            Select your favorite Vacation Spot

            <!-- Create a dropdown select element and bind its value to the 'vacationSpot' property. -->
            <select @bind="vacationSpot">

                <!-- Default option with a value of "0" instructs the user to select a spot. -->
                <option value="0">Select a spot ...</option>

                <!-- Loop through each 'spot' in the 'vacationSpots' collection and create an option element for each. -->
                @foreach (var spot in @vacationSpots)
                {
                    <!-- Set the option value to the 'spot' itself. -->
                    <option value="@spot">
                        <!-- Display the 'spot' as the option text. -->
                        @spot
                    </option>
                }
            </select>
        </label>
        <br />
        <label>
            <!-- Display a p instructing the user to rate the form control review on a scale from bad to good. -->
            Rate the form control review (bad to good)

            <!-- Create an input element of type 'range' for rating, binding its value to the 'ReviewRating' property. -->
            <input type="range" min="0" max="10" step="1" @bind="reviewRating" />
        </label>

        <br />
        <!-- Create a button element with a CSS class 'btn-success' and an 'onclick' event handler. -->
        <button class="btn-success" @onclick="ListSliderSubmit">
            <!-- Display the button p "List & Slider." -->
            List & Slider
        </button>
    </div>
</section>

<div>
    <h2>@feedback</h2>
</div>